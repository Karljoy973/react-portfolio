# -------------------------------------------------------------------
# Nom du workflow : CI
#
# Description générale :
# Ce workflow s’exécute automatiquement sur chaque push ou pull request
# vers la branche "master", ainsi que manuellement via "workflow_dispatch".
# Il permet d’assurer la qualité du code avant qu’il ne soit mergé.
#
# Étapes principales :
#
# 1. Commitlint (job "commitlint")
#    - Vérifie que les messages de commit respectent la convention définie
#      (basée sur "conventional commits" ou une règle personnalisée).
#    - Si un commit n’est pas valide, le workflow échoue et bloque le merge.
#    - S’exécute avant tout autre job.
#
# 2. Build & Tests (job "build")
#    - Dépend du job "commitlint" : il ne démarre que si commitlint réussit.
#    - Fonctionne sur Ubuntu avec une matrice de versions Node.js (18 et 20).
#    - Étapes :
#        a. Checkout du repo
#        b. Installation de pnpm
#        c. Installation des dépendances via "pnpm ci"
#        d. Vérification du lint avec "pnpm lint"
#        e. Lancement des tests unitaires avec Vitest ("pnpm test -- --run")
#    - Le merge dans master est bloqué si le lint ou les tests échouent.
#
# Configuration supplémentaire (à faire côté GitHub) :
# - Activer uniquement le "Squash merge" dans les paramètres du dépôt
#   (désactiver merge commit et rebase).
#   Ainsi, toutes les PR seront mergées avec un seul commit propre.
#
# Objectif :
# - Garantir que chaque contribution respecte les bonnes pratiques :
#     * Commits bien formatés
#     * Code sans erreurs de linting
#     * Tests unitaires fonctionnels
# - Éviter l’introduction de code non testé ou de mauvaise qualité dans master.
# -------------------------------------------------------------------

name: CI

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:

jobs:
  commitlint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for package.json
        id: check_pkg
        run: |
          if [ ! -f "package.json" ]; then
            echo "no_package=true" >> $GITHUB_OUTPUT
          else
            echo "no_package=false" >> $GITHUB_OUTPUT
          

      - name: Setup Node.js
        if: steps.check_pkg.outputs.no_package == 'false'
        uses: actions/setup-node@v4
        with:
          node-version: 24

      - name: Install dependencies
        if: steps.check_pkg.outputs.no_package == 'false'
        run: |
          corepack enable
          pnpm install --frozen-lockfile

      - name: Run commitlint
        if: steps.check_pkg.outputs.no_package == 'false'
        run: |
          pnpm dlx commitlint --from=origin/master --to=HEAD

  build:
    runs-on: ubuntu-latest
    needs: commitlint
    steps:
      - uses: actions/checkout@v4

      - name: Check for package.json
        id: check_pkg
        run: |
          if [ ! -f "package.json" ]; then
            echo "no_package=true" >> $GITHUB_OUTPUT
          else
            echo "no_package=false" >> $GITHUB_OUTPUT
          fi

      - name: Install pnpm
        if: steps.check_pkg.outputs.no_package == 'false'
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Use Node.js
        if: steps.check_pkg.outputs.no_package == 'false'
        uses: actions/setup-node@v4
        with:
          node-version: 24
          cache: "pnpm"

      - name: Install dependencies
        if: steps.check_pkg.outputs.no_package == 'false'
        run: pnpm ci

      - name: Lint check
        if: steps.check_pkg.outputs.no_package == 'false'
        run: pnpm lint

      - name: Run tests
        if: steps.check_pkg.outputs.no_package == 'false'
        run: pnpm test -- --run
  # only YAML updates 
  yaml-check:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' || github.event_name == 'pull_request' }}
    steps:
      - uses: actions/checkout@v4
      - name: Check YAML files
        if: ${{ github.event.pull_request && !cancelled() }}
        run: |
          echo "Only YAML files changed, skipping dependency installation."
